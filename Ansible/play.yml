- name : Setup Server
  hosts: localhost
  gather_facts: yes
  become: true
  vars_files:
    - ./group_vars/all/vault.yml
  tasks:

    - name: Check current user
      debug:
        msg: "Current user is {{ lookup('env', 'USER') }}"

    - name: Check if Docker setup script exists
      stat:
        path: ./setup_docker.sh
      register: script_stat

    - name: Ensure Docker setup script is executable
      file:
        path: ./setup_docker.sh
        mode: '0755'
      when: script_stat.stat.exists

    - name: Execute Docker setup script
      shell: ./setup_docker.sh
      register: script_output
      when: not script_stat.stat.exists

    - name: Install required system packages
      apt:
        pkg:
          - python3-pip
        state: latest
        update_cache: true
      when: ansible_facts.packages is undefined or 'python3-pip' not in ansible_facts.packages

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: present
    
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - /project
        - /project/backend
        - /project/front
        - /project/front/nginx
        - /project/front/frontend
        - /project/front/nginx/ssl/live/test.fourthestate.app
        - /project/backend/nginx
        - /project/backend/ghost
        - /project/backend/ghost/content
        - /project/backend/ghost/content/logs
    
    - name: Upload Nginx configuration
      copy:
        dest: /project/backend/nginx/default.conf
        content: |
          server {
            listen 80;
            listen [::]:80;
            server_name _;

            location / {
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header Host $http_host;
              proxy_pass http://ghost:2368;

              proxy_ignore_headers Set-Cookie Cache-Control;
              proxy_hide_header Set-Cookie;
              add_header X-Robots-Tag "noindex, nofollow";
              proxy_buffering on;
            }
          }
    - name: Upload Ghost configuration
      copy:
        dest: /project/backend/ghost/config.json
        content: |
          {
            "url": "http://localhost:2368",
            "server": {
              "port": 2368,
              "host": "::"
            },
            "frontend": {
              "url": "https://{{domain_name}}"
            },
            "database": {
              "client": "mysql",
              "connection": {
                "host"     : "mysql",
                "user"     : "{{ mysql_user }}",
                "password" : "{{ mysql_password }}",
                "database" : "{{ mysql_database }}"
              }
            },
            "paths": {
              "contentPath": "content/"
            },
            "privacy": {
              "useUpdateCheck": false,
              "useGravatar": false,
              "useRpcPing": false
            },
            "imageOptimization": {
              "maxWidth": 1240,
              "resize": true,
              "srcsets": false
            },
            "mail": {
              "transport": "SMTP",
              "options": {
                "service": "Mailgun",
                "host": "smtp.mailgun.org",
                "secure": true,
                "port": 465,
                "auth": {
                  "user": "mail_user",
                  "pass": "mail_pass"
                }
              }
            },
            "logging": {
              "level": "info",
              "rotation": {
                "enabled": true
              },
              "transports": ["file", "stdout"]
            },
            "enableGA": false,
            "autoletters": {
              "enabled": false,
              "whiteList": ["bohdan.r@fourthestate.app"]
            },
            "membersNotifications": {
              "enabled": false,
              "email": {
                "enabled": true,
                "from": "Kyiv Independent <community@kyivindependent.com>",
                "unsubscribeUrl": "/settings#notifications"
              }
            },
            "fakeTheme": {
              "enabled": true,
              "config": {
                "post": {
                  "liveUpdatesFrom": {
                    "type": "string",
                    "name": "Live Updates From (Format: 'yyyy-mm-dd')"
                  },
                  "liveUpdatesTo": {
                    "type": "string",
                    "name": "Live Updates To (Format: 'yyyy-mm-dd')"
                  },
                  "liveUpdatesSlug": {
                    "type": "string",
                    "name": "Live Updates Slug (Post URL)"
                  },
                  "isLiveUpdatesEnded": {
                    "type": "boolean",
                    "name": "Is Live Updates Finished?"
                  },
                  "isLiveUpdatesShortNews": {
                    "type": "boolean",
                    "name": "Is Live Updates short news"
                  }
                },
                "custom": {
                  "enable_hot_topic": {
                    "type": "boolean",
                    "default": false
                  },
                  "enable_live_updates": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            "meilisearch": {
              "enabled": false,
              "host": "http://localhost:7700",
              "apiKey": "{{ mail_search_api }}"
            }
          }

    - name: Copy SSL to NGINX
      shell: "scp /etc/letsencrypt/live/test.fourthestate.app/* /project/front/nginx/ssl/live/test.fourthestate.app"
      delegate_to: localhost

    - name: Upload Nginx configuration
      copy:
        dest: /project/front/nginx/default.conf
        content: |
          server {
            listen 80;
            listen [::]:80;

            server_name {{domain_name}};
            server_tokens off;

            location / {
              return 301 https://$host$request_uri;
            }
          }

          server {
            listen 443 ssl;
            listen [::]:443 ssl;

            server_name {{domain_name}};

            ssl_certificate /etc/letsencrypt/live/test.fourthestate.app/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/test.fourthestate.app/privkey.pem;
            
            location / {
              proxy_pass http://frontend:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
            }
            
            location ~^/socket\.io {
              proxy_pass http://ghost:2368;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
            }

            location ~ ^/members/webhooks/stripe/ {
              proxy_pass http://ghost:2368;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Proto https;
            }

            location ~*^/(ghost|p|members|content)/ {
              proxy_pass http://ghost:2368;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
            }
          }
    - name: Upload Frontend configuration
      copy:
        dest: /project/front/frontend/.env
        content: |
          NEXT_PUBLIC_GHOST_API_URL='https://{{domain_name}}'
          NEXT_PUBLIC_GHOST_API_KEY='{{front_public_api_key}}'

          NEXT_PUBLIC_GOOGLE_CLIENT_ID='21007502974-i97qj0ctd5v4qbaukbptk7dd36fbph3c.apps.googleusercontent.com'
          NEXT_PUBLIC_MICROSOFT_CLIENT_ID='f704b78c-637c-4b2f-b851-3bdbdc8e8f66'
          NEXT_PUBLIC_FACEBOOK_CLIENT_ID='969714300971210'

          NEXT_PUBLIC_APPLE_CLIENT_ID='com.fourthestate.app'
          NEXT_PUBLIC_APPLE_REDIRECT_URI='https://dev-mediaplatform.fourthestate.app'

          NEXT_PUBLIC_DOMAIN='164.90.243.167'


    - name: Upload Docker Compose configuration
      copy:
        dest: /project/compose.yml
        content: |
          services:
            knex_migrator_init:
              profiles: ["knex-migrator-init"]
              container_name: knex-migrator-init
              image: "gitlab.fourthestate.app:5050/mp/ghost/dev:latest"
              command: "yarn knex-migrator init"
              ports:
                - "2368:2368"
              environment:
                - NODE_ENV=production
              volumes:
                - ./ghost/content/:/app/ghost/core/content/:rw
                - ./ghost/config.json:/app/ghost/core/core/shared/config/env/config.production.json
              depends_on:
                - mysql
              networks:
                - webnet

            knex_migrator_migrate:
              profiles: ["knex-migrator-migrate"]
              container_name: knex-migrator-migrate
              image: "gitlab.fourthestate.app:5050/mp/ghost/dev:latest"
              command: "yarn knex-migrator migrate --v 5.40 --force"
              ports:
                - "2368:2368"
              environment:
                - NODE_ENV=production
              volumes:
                - ./ghost/content/:/app/ghost/core/content/:rw
                - ./ghost/config.json:/app/ghost/core/core/shared/config/env/config.production.json
              depends_on:
                - mysql
              networks:
                - webnet

            ghost:
              container_name: ghost
              image: "gitlab.fourthestate.app:5050/mp/ghost/dev:latest"
              restart: always
              ports:
                - "2368:2368"
              environment:
                - NODE_ENV=production
              volumes:
                - ./ghost/content/:/app/ghost/core/content/:rw
                - ./ghost/config.json:/app/ghost/core/core/shared/config/env/config.production.json
              depends_on:
                - mysql
              networks:
                - webnet

            mysql:
              container_name: mysql
              image: mysql:8.0.32
              restart: always
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: ghost
                MYSQL_USER: admin
                MYSQL_PASSWORD: admin
              ports:
                - "3306:3306"
              volumes:
                - ./mysql/data:/var/lib/mysql
              networks:
                - webnet

            frontend:
              container_name: frontend
              image: "gitlab.fourthestate.app:5050/mp/mediaplatform-frontend-app/autodeploy:latest"
              restart: always
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
              volumes:
                - ./frontend/.env:/app/.env
              networks:
                - webnet

            nginx:
              container_name: nginx
              image: nginx:latest
              restart: always
              volumes:
                - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
              ports:
                - "80:80"
                - "443:443"
              networks:
                - webnet

          networks:
            webnet:
              driver: bridge
   
    - name: Log into Docker registry
      docker_login:
        registry: "{{ docker_registry }}"
        username: "{{ registry_username }}"
        password: "{{ registry_password }}"
        reauthorize: yes
      register: login_result
      ignore_errors: yes

    - name: Debug Docker login result
      debug:
        var: login_result

    - name: Start all services
      shell: |
        cd /project
        docker compose pull
        docker compose up -d mysql
        sleep 60
        docker compose run knex_migrator_init
        sleep 10
        docker compose up -d


    - name: Debug pull result
      debug:
        var: pull_result

    